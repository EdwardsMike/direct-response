package EGA::DR;
require Exporter;

our @ISA	= qw( Exporter );
our @EXPORT	= qw(
			prod_pull
			place_order
			carrier_code
			get_order
			get_items
		    );
our @EXPORT_OK	= qw( 
			$DR_CARRIERS	
		    );
our $VERSION	= 1.00;

use strict;
use warnings;
use LWP::UserAgent;
use JSON::XS;
use Data::Dumper;
use Carp;

my $debug;
my $api_key	= 'd4249791-fc90-41cc-8872-0874958ecc22';

my $DR_CARRIERS = carrier_codes();

1;

# Get order details from the DR Shipping API
sub get_order {
    my $order 	= shift;
    my $url	= 'https://ega.mydirectresponse.com/api/shippingServer/' 
		. "$order?apiKey=$api_key"
		;
    
    my $request = LWP::UserAgent->new();

    my $resp    = $request->get( $url, 'Content-type' => 'application/json' );
    die "Error getting $url \n" . $resp->status_line
	unless $resp->is_success();

    my $RESULT  = decode_json( $resp->content() );

    my %HASH;
#    foreach my $item ( @{ $RESULT->{ 'response' }->{ 'items' } } ) { 
#	$HASH{ $item->{ itemNumber } } = $item->{ revisionName };
#    }
#    return \%HASH;
    return $RESULT;

}

sub place_order {
    my $ORDER	= shift;	# This should be a HASH REF*
    my $inv	= $ORDER->{ 'inventory' };

    # Put the data in a structure expected by the API
    my $DATA	= format_order( $ORDER );
    print Dumper encode_json( $DATA )
	if $debug;

    my $url	= 'https://ega.mydirectresponse.com/api/inventories/' 
		. "$inv/orders"
		;

    my $request = LWP::UserAgent->new();
    my $RESP    = $request->post( $url, 
			'Content-type'	=> 'application/json', 
			'Content'	=> encode_json( $DATA ),
			);
    croak "Error in $url \n" . $RESP->status_line
	unless $RESP->is_success();
    
    my $CONTENT	    = decode_json( $RESP->content() );
    my $order_no    = $CONTENT->{ 'response' }->{ 'id' };

    return $order_no;
}

sub prod_pull {
    my $PULL	= shift;	# This should be a HASH REF*
    my $inv	= $PULL->{ 'inventory' };

    # Put the data in a structure expected by the API
    my $DATA    = get_prod_pull( $PULL );
    print Dumper encode_json( $DATA )
	if $debug;

    my $url	= 'https://ega.mydirectresponse.com/api/inventories/' 
		. "$inv/orders"
		;

    my $request = LWP::UserAgent->new();
    my $RESP    = $request->post( $url, 
			'Content-type'	=> 'application/json', 
			'Content'	=> encode_json( $DATA ),
			);
    croak "Error in $url \n" . $RESP->status_line
	unless $RESP->is_success();
    
    my $CONTENT	    = decode_json( $RESP->content() );
    my $order_no    = $CONTENT->{ 'response' }->{ 'id' };

    return $order_no;
}

sub format_order {
    my $ORD	    = shift; # This should be a HASH REF
    my $branch	    = $ORD->{ 'branch' };
    my $cost_ctr    = $ORD->{ 'cost_ctr' };
    my $req_date    = $ORD->{ 'req_date' };
    my $job_no	    = ( $ORD->{ 'PSI_jobno' } || '' );
    my $carrier	    = carrier_code( $ORD->{ 'carrier' } );
    my $service	    = ( $ORD->{ 'service' } || 'Standard' );

    my %ORDER = (
	'apiKey'	    => $api_key,
	'branch'	    => $branch,
	'carrierProgramId'  => $carrier,
        'comment'	    => "For PSI Job $job_no",
        'costCenter'	    => $cost_ctr,
        'serviceType'	    => $service,
	'username'	    => 'mike.edwards',
	'shipDate'	    => $req_date,
	'shipTo'	    => {
                        'firstName'	=> ( $ORD->{ 'first' } || '' ),
                        'lastName'	=> ( $ORD->{ 'last' } || '' ),
                        'companyName'	=> ( $ORD->{ 'company' } || '' ),
                        'line1'		=> ( $ORD->{ 'addr1' } ),
                        'line2'		=> ( $ORD->{ 'addr2' } || '' ),
                        'city'		=> ( $ORD->{ 'city' } ),
                        'state'		=> ( $ORD->{ 'state' } ),
                        'postalCode'	=> ( $ORD->{ 'zip' } ),
                        'country'	=> ( $ORD->{ 'country' } || 'United States' ),
                        'phoneNumber'	=> ( $ORD->{ 'phone' } ),
                        'emailAddress'	=> ( $ORD->{ 'email' } ),
                      },
    );
    # This should be generated by a loop to allow multiple items
    # to be ordered.
    while ( @{ $ORD->{ 'items' } } ) {
	my ( $item, $rev, $qty ) = splice @{ $ORD->{ 'items' } }, 0, 3;
	$rev =~ s/^\s*$/none/;    
	push @{ $ORDER{ 'lineItems' } }, 
                           {
                             'itemNumber'   => $item,
                             'quantity'	    => $qty,
                             'revisionName' => $rev,
                           };
    }
    return \%ORDER;
}

sub carrier_code {
    my $carr = shift;
    $carr =~ s/Fed\s?Ex/FedEx/i;
    return ( $DR_CARRIERS->{ $carr } || 'Carrier Not Found!' );
}

sub get_prod_pull {
    my $ORD	    = shift; # This should be a HASH REF
    my $branch	    = $ORD->{ 'branch' };
    my $req_date    = $ORD->{ 'req_date' };
    my $job_no	    = $ORD->{ 'PSI_jobno' };

    my %ORDER = (
	'apiKey'	    => $api_key,
	'branch'	    => $branch,
	'carrierProgramId'  => 65,			# This is INTERNAL
        'comment'	    => "For PSI Job $job_no",
        'costCenter'	    => 'Prod Pull - Print/PSI',
        'serviceType'	    => 'Standard',
	'username'	    => 'mike.edwards',
	'shipDate'	    => $req_date,
	'shipTo'	    => {
                        'city'		=> 'Des Moines',
                        'companyName'	=> 'EDWARDS',
                        'country'	=> 'United States',
                        'emailAddress'	=> 'receiving@ega.com',
                        'firstName'	=> 'Bell',
                        'lastName'	=> 'Receiving',
                        'line1'		=> '2700 Bell Ave',
                        'phoneNumber'	=> '515-280-9765',
                        'postalCode'	=> '50321',
                        'state'		=> 'IA'
                      },
    );
    # This should be generated by a loop to allow multiple items
    # to be ordered.
    while ( @{ $ORD->{ 'items' } } ) {
	my ( $item, $rev, $qty ) = splice @{ $ORD }, 0, 3;
	$rev =~ s/^\s*$/none/;    
	push @{ $ORDER{ 'lineItems' } }, 
                           {
                             'itemNumber'   => $item,
                             'quantity'	    => $qty,
                             'revisionName' => $rev,
                           };
    }
    return \%ORDER;
}

sub carrier_codes {
    my %HASH = (
        'Customer Pick Up' => 47,
        'EDWARDS Truck' => 48,
        'Internal' => 65,
        'FedEx 1Day Freight' => 42,
        'FedEx 2Day' => 30,
        'FedEx 2Day AM' => 29,
        'FedEx 2Day Freight' => 43,
        'FedEx 3Day Freight' => 44,
        'FedEx Express Saver' => 31,
        'FedEx First Overnight' => 26,
        'FedEx First Overnight Freight' => 41,
        'FedEx Freight Economy' => 46,
        'FedEx Freight Priority' => 45,
        'FedEx Ground' => 1,
        'FedEx Home Delivery' => 33,
        'FedEx International Economy' => 38,
        'FedEx International First' => 36,
        'FedEx International ground' => 39,
        'FedEx International Next Flight' => 35,
        'FedEx International Priority' => 37,
        'FedEx Priority Overnight' => 27,
        'FedEx SameDay' => 25,
        'FedEx SameDay Freight' => 40,
        'FedEx SmartPost' => 34,
        'FedEx Standard Overnight' => 28,
        'Other Best Way' => 49,
        'Other Local Delivery' => 51,
        'Other LTL Freight' => 50,
        'Other Non-Local Delivery' => 52,
        'UPS 2nd Day Air' => 7,
        'UPS 2nd Day Air AM' => 6,
        'UPS 2nd Day Air Freight' => 17,
        'UPS 2nd Day Air Freight NGS' => 18,
        'UPS 3 Day Freight' => 19,
        'UPS 3 Day Freight NGS' => 20,
        'UPS 3 Day Select' => 8,
        'UPS Air Freight Consolidated' => 23,
        'UPS Air Freight Direct' => 22,
        'UPS Express Critical' => 2,
        'UPS Express Freight' => 21,
        'UPS Freight LTL' => 24,
        'UPS Ground' => 9,
        'UPS Next Day Air' => 4,
        'UPS Next Day Air Early AM' => 3,
        'UPS Next Day Air Freight' => 15,
        'UPS Next Day Air Freight NGS' => 16,
        'UPS Next Day Air Saver' => 5,
        'UPS Standard' => 14,
        'UPS Worldwide Expedited' => 13,
        'UPS Worldwide Express' => 11,
        'UPS Worldwide Express Plus' => 10,
        'UPS Worldwide Saver' => 12,
        'USPS First Class' => 53,
        'USPS First-Class Package Intl Service' => 66,
        'USPS Intl Priority Flat Rate Envelope' => 61,
        'USPS Intl Priority Large Flat Rate Box' => 64,
        'USPS Intl Priority Mail' => 60,
        'USPS Intl Priority Medium Flat Rate Box' => 63,
        'USPS Intl Priority Small Flat Rate Box' => 62,
        'USPS Parcel Post' => 54,
        'USPS Priority Mail' => 55,
        'USPS Priority Mail Flat Rate Envelope' => 56,
        'USPS Priority Mail Large Flat Rate Box' => 59,
        'USPS Priority Mail Medium Flat Rate Box' => 58,
        'USPS Priority Mail Small Flat Rate Box' => 57,
    );
    return \%HASH;
}

# Given an inventory, return a hashref of items
sub get_items {
    my $inv	    = shift;
    my $url	    = 'https://ega.mydirectresponse.com/api/inventories/' 
		    . "$inv/externally-visible-items?"
		    . "apiKey=$api_key"
		    ;

    my $request = LWP::UserAgent->new();

    my $resp    = $request->get( $url, 'Content-type' => 'application/json' );
    die "Error getting $url \n" . $resp->status_line
	unless $resp->is_success();

    my $RESULT  = decode_json( $resp->content() );

    my %HASH;
    foreach my $item ( @{ $RESULT->{ 'response' }->{ 'items' } } ) { 
	$HASH{ $item->{ itemNumber } } = $item->{ revisionName };
    }
    return \%HASH;
}



=head1 NAME

EGA::DR

=head1 SYNOPSIS

A collection of subroutines for interacting with 
DirectEdje Direct Response API

=head1 DESCRIPTION

=head2 place_order [ HASH REF ]

Given a hash reference in the correct structure, place an Order.
It returns the order number assigned by DR.

The required data structure looks like this (in dereferenced form; keys marked
with "*" are optional):

    my %HASH = (
	inventory   => 'Test%20Inventory',
	branch	    => 'TestBranch',
	cost_ctr    => 'Cost Center',
	PSI_jobno*  => '123456',
	req_date    => '12/31/2020',
	carrier	    => 'UPS Ground',
	service*    => 'Standard',
	first	    => 'Bob',
	last	    => 'Dobbs',
	company*    => 'Church of the Sub-Genius',
	addr1	    => '123 Main St',
	addr2*	    => 'Ste 300',
	city	    => 'Anytown',
	state	    => 'US',
	zip	    => '99999',
	country*    => 'United States',
	items	    => [ item1, rev1, qty1,
			 item2, rev2, qty2,
			 ...
			 itemN, revN, qtyN,
			 ],
	);

    Example: my $order = prod_pull( \%HASH );


=head2 prod_pull [ HASH REF ]

Given a hash reference in the correct structure, place a Production Pull. This
will create an order with a destination of the main EDWARDS facility at
2700 Bell Ave. This cannot be changed. It is similar to place_order() but
simplifies the process since the destination is fixed. It returns the order
number assigned by DR.

The required data structure looks like this (in dereferenced form):

    my %HASH = (
	inventory   => 'Test%20Inventory',
	branch	    => 'TestBranch',
	PSI_jobno   => '123456',
	req_date    => '12/31/2020',
	items	    => [ item1, rev1, qty1,
			 item2, rev2, qty2,
			 ...
			 itemN, revN, qtyN,
			 ],
	);

    Example: my $order = prod_pull( \%HASH );

=head1 BUGS

Probably...

=head1 AUTHOR

Mike Edwards, Director of Data Services at Edwards Graphic Arts in Des Moines, Iowa

This program is free software.  You may copy or 
redistribute it under the same terms as Perl itself.

Ni!

